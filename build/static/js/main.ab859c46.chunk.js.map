{"version":3,"sources":["actions/contactActions.js","actions/types.js","components/contacts/Contact.js","components/contacts/Contacts.js","components/layout/TextInputGroup.js","components/contacts/AddContact.js","components/contacts/EditContact.js","components/layout/Header.js","components/pages/About.js","components/pages/NotFound.js","reducers/contactReducer.js","reducers/index.js","store.js","App.js","registerServiceWorker.js","index.js"],"names":["getContact","id","dispatch","a","async","axios","get","res","type","payload","data","Contact","state","showContactInfo","onDeleteClick","props","deleteContact","onEditClick","this","contact","name","email","phone","className","onClick","setState","style","cursor","float","color","bind","to","marginRight","Component","connect","delete","Contacts","getContacts","contacts","Fragment","map","key","TextInputGroup","label","value","placeholder","onChange","error","htmlFor","classnames","defaultProps","AddContact","errors","onSubmit","e","preventDefault","newContact","addContact","history","push","target","post","EditContact","updContact","match","params","updateContact","nextProps","nextState","put","Header","branding","href","initalState","combineReducers","action","filter","middleWare","thunk","store","createStore","rootReducer","compose","applyMiddleware","App","exact","path","component","About","NotFound","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.ab859c46.chunk.js","sourcesContent":["import { GET_CONTACTS,ADD_CONTACT,DELETE_CONTACT ,GET_CONTACT, UPDATE_CONTACT}  from './types';\r\nimport axios from 'axios';\r\n\r\nexport const getContacts = ()=> async dispatch =>{\r\n    let res =  await axios.get('https://jsonplaceholder.typicode.com/users'); \r\n  \r\n    dispatch({\r\n        type : GET_CONTACTS,\r\n        payload: res.data\r\n    });\r\n};\r\nexport const addContact = (contact)=> async dispatch => {\r\n    let res = await axios.post('https://jsonplaceholder.typicode.com/users',contact);\r\n    dispatch ({\r\n        type : ADD_CONTACT,\r\n        payload : res.data\r\n    });\r\n};\r\nexport const deleteContact = (id)=> async dispatch => {\r\n\r\n    await axios.delete(`https://jsonplaceholder.typicode.com/users/${id}`);\r\n    dispatch({\r\n        type : DELETE_CONTACT,\r\n        payload : id\r\n\r\n    }) ;\r\n};\r\n\r\nexport const getContact = (id)=> async dispatch =>{\r\n    let res = await axios.get(`https://jsonplaceholder.typicode.com/users/${id}`);\r\n    dispatch({\r\n        type : GET_CONTACT,\r\n        payload : res.data\r\n    }) ;\r\n}\r\nexport const updateContact = (contact)=> async dispatch =>{\r\n    let res = await axios.put(`https://jsonplaceholder.typicode.com/users/${contact.id}`,contact);\r\n    dispatch({\r\n        type : UPDATE_CONTACT,\r\n        payload : res.data\r\n    }) ;\r\n}","export const GET_CONTACTS ='GET_CONTACTS';\r\nexport const DELETE_CONTACT ='DELETE_CONTACT';\r\nexport const ADD_CONTACT ='ADD_CONTACT';\r\nexport const GET_CONTACT ='GET_CONTACT';\r\nexport const UPDATE_CONTACT ='UPDATE_CONTACT';","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {deleteContact, getContact} from '../../actions/contactActions';\nclass Contact extends Component {\n  state = {\n    showContactInfo: false\n  };\n\n  onDeleteClick = id => {\n    //// DELETE CONTACT ////\n    this.props.deleteContact(id);\n  };\nonEditClick = id =>{\n  this.props.getContact(id);\n}\n  render() {\n    const { id, name, email, phone } = this.props.contact;\n    const { showContactInfo } = this.state;\n\n    return (\n      <div className=\"card card-body mb-3\">\n        <h4>\n          {name}{' '}\n          <i\n            onClick={() =>\n              this.setState({\n                showContactInfo: !this.state.showContactInfo\n              })\n            }\n            className=\"fas fa-sort-down\"\n            style={{ cursor: 'pointer' }}\n          />\n          <i\n            className=\"fas fa-times\"\n            style={{ cursor: 'pointer', float: 'right', color: 'red' }}\n            onClick={this.onDeleteClick.bind(this, id)}\n          />\n          <Link to={`contact/edit/${id}`}>\n            <i\n              className=\"fas fa-pencil-alt\"\n              style={{\n                cursor: 'pointer',\n                float: 'right',\n                color: 'black',\n                marginRight: '1rem'\n              }}\n              onClick = {this.onEditClick.bind(this,id)}\n            />\n          </Link>\n        </h4>\n        {showContactInfo ? (\n          <ul className=\"list-group\">\n            <li className=\"list-group-item\">Email: {email}</li>\n            <li className=\"list-group-item\">Phone: {phone}</li>\n          </ul>\n        ) : null}\n      </div>\n    );\n  }\n}\n\nContact.propTypes = {\n  contact: PropTypes.object.isRequired\n};\n\nexport default connect(null,{deleteContact,getContact})(Contact);\n","import React, { Component } from 'react';\nimport Contact from './Contact';\nimport { connect } from 'react-redux';\nimport {getContacts} from '../../actions/contactActions';\n\n\nimport PropTypes from 'prop-types';\n\nclass Contacts extends Component {\n\n  componentDidMount(){\n     this.props.getContacts();\n  }\n  render() {\n    const { contacts } = this.props;\n \n    return (\n      <React.Fragment>\n        <h1 className=\"display-4 mb-2\">\n          <span className=\"text-danger\">Contact</span> List\n        </h1>\n        {contacts.map(contact => (\n          <Contact key={contact.id} contact={contact} />\n        ))}\n      </React.Fragment>\n    );\n  }\n}\nContacts.propTypes = {\n  contacts: PropTypes.array.isRequired,\n  getContacts: PropTypes.func.isRequired\n};\n\nconst mapStateToProps  = (state) =>({\n  contacts : state.contact.contacts\n});\n\n// const mapDispatchToProps = (dispatch) =>({\n//      getContacts: () => dispatch({type: GET_CONTACTS})\n// });\n\nexport default connect(mapStateToProps,{getContacts})(Contacts);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nconst TextInputGroup = ({\n  label,\n  name,\n  value,\n  placeholder,\n  type,\n  onChange,\n  error\n}) => {\n  return (\n    <div className=\"form-group\">\n      <label htmlFor={name}>{label}</label>\n      <input\n        type={type}\n        name={name}\n        className={classnames('form-control form-control-lg', {\n          'is-invalid': error\n        })}\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n      />\n      {error && <div className=\"invalid-feedback\">{error}</div>}\n    </div>\n  );\n};\n\nTextInputGroup.propTypes = {\n  label: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  placeholder: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  error: PropTypes.string\n};\n\nTextInputGroup.defaultProps = {\n  type: 'text'\n};\n\nexport default TextInputGroup;\n","import React, { Component } from 'react';\nimport TextInputGroup from '../layout/TextInputGroup';\nimport { connect } from 'react-redux';\nimport { addContact } from '../../actions/contactActions';\n// import uuid from 'uuid';\nclass AddContact extends Component {\n  state = {\n    name: '',\n    email: '',\n    phone: '',\n    errors: {}\n  };\n\n  onSubmit = (e) => {\n    e.preventDefault();\n\n    const { name, email, phone } = this.state;\n\n    // Check For Errors\n    if (name === '') {\n      this.setState({ errors: { name: 'Name is required' } });\n      return;\n    }\n\n    if (email === '') {\n      this.setState({ errors: { email: 'Email is required' } });\n      return;\n    }\n\n    if (phone === '') {\n      this.setState({ errors: { phone: 'Phone is required' } });\n      return;\n    }\n\n    const newContact = {\n      // id: uuid(),\n      name,\n      email,\n      phone\n    };\n\n    this.props.addContact(newContact);\n\n    // Clear State\n    this.setState({\n      name: '',\n      email: '',\n      phone: '',\n      errors: {}\n    });\n\n    this.props.history.push('/');\n  };\n\n  onChange = e => this.setState({ [e.target.name]: e.target.value });\n\n  render() {\n    const { name, email, phone, errors } = this.state;\n\n    return (\n      <div className=\"card mb-3\">\n        <div className=\"card-header\">Add Contact</div>\n        <div className=\"card-body\">\n          <form onSubmit={this.onSubmit}>\n            <TextInputGroup\n              label=\"Name\"\n              name=\"name\"\n              placeholder=\"Enter Name\"\n              value={name}\n              onChange={this.onChange}\n              error={errors.name}\n            />\n            <TextInputGroup\n              label=\"Email\"\n              name=\"email\"\n              type=\"email\"\n              placeholder=\"Enter Email\"\n              value={email}\n              onChange={this.onChange}\n              error={errors.email}\n            />\n            <TextInputGroup\n              label=\"Phone\"\n              name=\"phone\"\n              placeholder=\"Enter Phone\"\n              value={phone}\n              onChange={this.onChange}\n              error={errors.phone}\n            />\n            <input\n              type=\"submit\"\n              value=\"Add Contact\"\n              className=\"btn btn-light btn-block\"\n            />\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default connect(null, {addContact})(AddContact);\n","import React, { Component } from 'react';\nimport TextInputGroup from '../layout/TextInputGroup';\nimport { connect} from 'react-redux';\nimport { getContact, updateContact } from '../../actions/contactActions';\nclass EditContact extends Component {\n  state = {\n    name: '',\n    email: '',\n    phone: '',\n    errors: {}\n  };\n componentDidMount(){\n  const { id } = this.props.match.params;\nthis.props.getContact(id);\n }\n componentWillReceiveProps(nextProps,nextState){\n   const { name,email,phone} = nextProps.contact;\n   this.setState({\n     name,\n     email,\n     phone\n   })\n }\n  onSubmit = (e) => {\n    e.preventDefault();\n\n    const { name, email, phone } = this.state;\n\n    // Check For Errors\n    if (name === '') {\n      this.setState({ errors: { name: 'Name is required' } });\n      return;\n    }\n\n    if (email === '') {\n      this.setState({ errors: { email: 'Email is required' } });\n      return;\n    }\n\n    if (phone === '') {\n      this.setState({ errors: { phone: 'Phone is required' } });\n      return;\n    }\n\n    \n//this.props.up\n    const { id } = this.props.match.params;\n    const updContact = {\n      id,\n      name,\n      email,\n      phone\n    };\n   \n    this.props.updateContact(updContact);\n\n    // Clear State\n    this.setState({\n      name: '',\n      email: '',\n      phone: '',\n      errors: {}\n    });\n\n    this.props.history.push('/');\n  };\n\n  onChange = e => this.setState({ [e.target.name]: e.target.value });\n\n  render() {\n    const { name, email, phone, errors } = this.state;\n\n    return (\n      <div className=\"card mb-3\">\n        <div className=\"card-header\">Edit Contact</div>\n        <div className=\"card-body\">\n          <form onSubmit={this.onSubmit}>\n            <TextInputGroup\n              label=\"Name\"\n              name=\"name\"\n              placeholder=\"Enter Name\"\n              value={name}\n              onChange={this.onChange}\n              error={errors.name}\n            />\n            <TextInputGroup\n              label=\"Email\"\n              name=\"email\"\n              type=\"email\"\n              placeholder=\"Enter Email\"\n              value={email}\n              onChange={this.onChange}\n              error={errors.email}\n            />\n            <TextInputGroup\n              label=\"Phone\"\n              name=\"phone\"\n              placeholder=\"Enter Phone\"\n              value={phone}\n              onChange={this.onChange}\n              error={errors.phone}\n            />\n            <input\n              type=\"submit\"\n              value=\"Update Contact\"\n              className=\"btn btn-light btn-block\"\n            />\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  contact: state.contact.contact\n})\nexport default connect(mapStateToProps,{ getContact,updateContact})(EditContact);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nconst Header = props => {\n  const { branding } = props;\n  return (\n    <nav className=\"navbar navbar-expand-sm navbar-dark bg-danger mb-3 py-0\">\n      <div className=\"container\">\n        <a href=\"/\" className=\"navbar-brand\">\n          {branding}\n        </a>\n        <div>\n          <ul className=\"navbar-nav mr-auto\">\n            <li className=\"nav-item\">\n              <Link to=\"/\" className=\"nav-link\">\n                <i className=\"fas fa-home\" /> Home\n              </Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link to=\"/contact/add\" className=\"nav-link\">\n                <i className=\"fas fa-plus\" /> Add\n              </Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link to=\"/about\" className=\"nav-link\">\n                <i className=\"fas fa-question\" /> About\n              </Link>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </nav>\n  );\n};\n\nHeader.defaultProps = {\n  branding: 'My App'\n};\n\nHeader.propTypes = {\n  branding: PropTypes.string.isRequired\n};\n\nexport default Header;\n","import React from 'react';\n\nexport default () => {\n  return (\n    <div>\n      <h1 className=\"display-4\">About Contact Manager</h1>\n      <p className=\"lead\">Simple app to manage contacts</p>\n      <p className=\"text-secondary\">Version 1.0.0</p>\n    </div>\n  );\n};\n","import React from 'react';\n\nexport default () => {\n  return (\n    <div>\n      <h1 className=\"display-4\">\n        <span className=\"text-danger\">404</span> Page Not Found\n      </h1>\n      <p className=\"lead\">Sorry, that page does not exist</p>\n    </div>\n  );\n};\n","import { GET_CONTACTS, DELETE_CONTACT, ADD_CONTACT,GET_CONTACT,UPDATE_CONTACT } from '../actions/types';\r\n\r\nconst initalState = {\r\n    contacts: [\r\n        // {\r\n        //   id: 1,\r\n        //   name: 'John Doe',\r\n        //   email: 'john@gmail.com',\r\n        //   phone: '555-555-5555'\r\n        // },\r\n        // {\r\n        //   id: 2,\r\n        //   name: 'Karen Williams',\r\n        //   email: 'karen@gmail.com',\r\n        //   phone: '444-444-4444'\r\n        // },\r\n        // {\r\n        //   id: 3,\r\n        //   name: 'Henry Johnson',\r\n        //   email: 'henry@gmail.com',\r\n        //   phone: '333-333-333'\r\n        // }\r\n      ],\r\n      contact : {}\r\n};\r\n\r\nexport default function(state = initalState,action) {\r\n    switch(action.type) {\r\n        case GET_CONTACTS :\r\n            return{\r\n                ...state,\r\n                contacts : action.payload\r\n            };\r\n            case ADD_CONTACT :\r\n              return{\r\n                  ...state,\r\n                  contacts : [action.payload,...state.contacts]\r\n              };\r\n              case DELETE_CONTACT :\r\n                return{\r\n                    ...state,\r\n                    contacts : state.contacts\r\n                    .filter(contact => contact.id \r\n                      !== action.payload)\r\n                };\r\n                case GET_CONTACT :\r\n                return{\r\n                    ...state,\r\n                    contact : action.payload\r\n              \r\n                };\r\n                case UPDATE_CONTACT :\r\n                return{\r\n                    ...state,\r\n                    contacts : state.contacts.map(\r\n                        contact => \r\n                        contact.id === action.payload.id\r\n                        ? (contact = action.payload)\r\n                        : contact\r\n\r\n                )\r\n              \r\n                };\r\n        default :\r\n        return state;\r\n    }\r\n}","import  { combineReducers } from 'redux';\r\nimport contactReducer from './contactReducer';\r\n\r\nexport default combineReducers({\r\n    contact : contactReducer\r\n})","import {createStore , applyMiddleware , compose} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst initialState = {};\r\n\r\nconst middleWare = [thunk];\r\nconst store = createStore(rootReducer,initialState,\r\n    compose(applyMiddleware(...middleWare)\r\n    // ,window.__REDUX_DEVTOOLS_EXTENSION &&\r\n    // window.__REDUX_DEVTOOLS_EXTENSION__()\r\n));\r\n\r\nexport default store;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Contacts from './components/contacts/Contacts';\nimport AddContact from './components/contacts/AddContact';\nimport EditContact from './components/contacts/EditContact';\nimport Header from './components/layout/Header';\nimport About from './components/pages/About';\nimport NotFound from './components/pages/NotFound';\n\nimport {Provider} from 'react-redux';\nimport store from './store';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store = {store}>\n      <Router>\n        <div className=\"App\">\n          <Header branding=\"Contact Manager\" />\n          <div className=\"container\">\n            <Switch>\n              <Route exact path=\"/\" component={Contacts} />\n              <Route exact path=\"/contact/add\" component={AddContact} />\n              <Route exact path=\"/contact/edit/:id\" component={EditContact} />\n              <Route exact path=\"/about\" component={About} />\n              <Route component={NotFound} />\n            </Switch>\n          </div>\n        </div>\n      </Router>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}